name: Deploy to PyPI

on:
  release:
    types: [ published ]
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build_wheels:
    name: Build ${{ matrix.os }}${{ matrix.archname }}${{ matrix.libc }} wheels
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
        arch: [ x86_64 ]
        archname: [ "" ]
        skip: [ "*-musllinux_*" ]
        libc: [ "" ]
        include:
          - arch:     arm64
            archname: "-arm64"
            os:       macos-latest
          - arch: x86_64
            os:   ubuntu-latest
            skip: "*-manylinux_*"
            libc: "-musl"
    #          - arch:     aarch64
    #            archname: "-arm64"
    #            os:       ubuntu-latest
    #            qemu:     true
    #          - arch:     aarch64
    #            archname: "-arm64"
    #            os:       ubuntu-latest
    #            qemu:     true
    #            skip:     "*-manylinux_*"
    #            libc:     "-musl"

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - uses: ilammy/msvc-dev-cmd@v1
      #      - name: Install QEMU
      #        uses: docker/setup-qemu-action@v1
      #        if:   matrix.qemu
      #        with:
      #          platforms: arm64
      - name: Build wheels
        uses: pypa/cibuildwheel@2.6.0
        env:
          CIBW_ARCHS_MACOS: ${{ matrix.arch }}
          CIBW_ARCHS_LINUX: ${{ matrix.arch }}
          CIBW_SKIP:        ${{ matrix.skip }}
      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl

  build_sdist:
    name:    Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - uses: actions/setup-python@v3
        name: Install Python
      - name: Install dependencies
        run: python -m pip install build
      - name: Build sdist
        run:  python -m build --sdist
      - name: Install sdist
        run: python -m pip install --verbose dist/*.tar.gz
      - uses: actions/upload-artifact@v3
        with:
          path: dist/*.tar.gz

  upload_pypi:
    needs: [ build_wheels, build_sdist ]
    runs-on: ubuntu-latest
    if:      github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: artifact
          path: dist
      - uses: pypa/gh-action-pypi-publish@master
        with:
          user:          __token__
          password:      ${{ secrets.pypi_password }}
          skip_existing: true
          verbose:       true
