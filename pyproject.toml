[build-system]
requires = [
    "setuptools>=61",
    "setuptools_scm[toml]>=7",
    "ninja>=1.10; sys_platform != 'win32'",
    "cmake>=3.19",
]
build-backend = "setuptools.build_meta"

[project]
name = "mqt.qcec"
description = "A tool for Quantum Circuit Equivalence Checking"
readme = "README.md"
authors = [
    { name = "Lukas Burgholzer", email = "lukas.burgholzer@jku.at"},
    { name = "Tom Peham", email = "tom.peham@tum.de" }
]
keywords = ["MQT", "quantum computing", "design automation", "equivalence checking", "verification"]
license = { file = "LICENSE.md" }

classifiers=[
    "Development Status :: 5 - Production/Stable",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: C++",
    "License :: OSI Approved :: MIT License",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: MacOS",
    "Operating System :: POSIX :: Linux",
    "Intended Audience :: Science/Research",
    "Natural Language :: English",
    "Topic :: Scientific/Engineering :: Electronic Design Automation (EDA)",
]
requires-python = ">=3.8"
dependencies = [
    "importlib_resources>=5.0; python_version < '3.10'",
    "typing_extensions>=4.2",
    "qiskit-terra>=0.20",
]
dynamic = ["version"]

[project.optional-dependencies]
test = ["pytest>=7.2"]
coverage = ["mqt.qcec[test]", "pytest-cov[toml]"]
docs = [
    "sphinx>=5",
    "furo",
    "sphinxcontrib-bibtex>=2.4.2",
    "sphinx-copybutton",
    "sphinx-hoverxref",
    "pybtex>=0.24",
    "importlib_metadata>=4.4; python_version < '3.10'",
    "ipython",
    "ipykernel",
    "nbsphinx",
    "sphinxext-opengraph",
    "sphinx-autodoc-typehints",
    "qiskit-terra[visualization]",
]
dev = ["mqt.qcec[coverage, docs]"]

[project.urls]
Homepage = "https://github.com/cda-tum/qcec"
Documentation = "https://qcec.readthedocs.io"
"Bug Tracker" = "https://github.com/cda-tum/qcec/issues"
Discussions = "https://github.com/cda-tum/qcec/discussions"
Research = "https://www.cda.cit.tum.de/research/quantum_verification/"

[tool.setuptools.packages.find]
include = ["mqt.*"]

[tool.setuptools_scm]

[tool.cibuildwheel]
build = "cp3*"
skip = "*-musllinux_*"
archs = "auto64"
test-extras = ["test"]
test-command = "python -c \"from mqt import qcec\""
environment = { DEPLOY = "ON" }
build-frontend = "build"
build-verbosity = 3

[tool.cibuildwheel.linux]

[tool.cibuildwheel.macos]
environment = { MACOSX_DEPLOYMENT_TARGET = "10.15", DEPLOY = "ON" }

[tool.cibuildwheel.windows]
before-build = "pip install delvewheel"
repair-wheel-command = "delvewheel repair -v -w {dest_dir} {wheel}"

[tool.pytest.ini_options]
minversion = "7.2"
testpaths = ["test/python"]
addopts = ["-ra", "--strict-markers", "--strict-config", "--showlocals"]
log_cli_level = "INFO"
xfail_strict = true
filterwarnings = [
    "error",
    'ignore:.*`product` is deprecated.*:DeprecationWarning:qiskit:',
    'ignore:.*qiskit.__qiskit_version__.*:DeprecationWarning:qiskit:',
]

[tool.coverage.run]
source = ["mqt.qcec"]
omit = ["mqt/qcec/types.py"]

[tool.coverage.report]
show_missing = true
skip_empty = true
precision = 1

[tool.check-manifest]
ignore = [
    "docs/**",
    ".*",
    ".*/**",
    "noxfile.py"
]

[tool.black]
line-length = 120

[tool.isort]
profile = "black"
src_paths = ["mqt/qcec", "test/python"]

[tool.mypy]
files = ["mqt/qcec", "test/python", "setup.py"]
python_version = "3.8"
strict = true
show_error_codes = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
warn_unreachable = true
explicit_package_bases = true
pretty = true

[[tool.mypy.overrides]]
module = ["qiskit.*"]
ignore_missing_imports = true

[tool.ruff]
include = ["*.py", "*.pyi", "**/pyproject.toml", "*.ipynb"]
select = [
    "E", "F", "W", # flake8
    "A",           # flake8-builtins
    "ANN",         # flake8-annotations
    "ARG",         # flake8-unused-arguments
    "ASYNC",       # flake8-async
    "B",  "B904",  # flake8-bugbear
    "C4",          # flake8-comprehensions
    "D",           # pydocstyle
    "EM",          # flake8-errmsg
    "EXE",         # flake8-executable
    "FA",          # flake8-future-annotations
    "I",           # isort
    "ICN",         # flake8-import-conventions
    "ISC",         # flake8-implicit-str-concat
    "N",           # flake8-naming
    "NPY",         # numpy
    "PERF",        # perflint
    "PGH",         # pygrep-hooks
    "PIE",         # flake8-pie
    "PL",          # pylint
    "PT",          # flake8-pytest-style
    "PTH",         # flake8-use-pathlib
    "PYI",         # flake8-pyi
    "Q",           # flake8-quotes
    "RET",         # flake8-return
    "RSE",         # flake8-raise
    "RUF",         # Ruff-specific
    "SLF",         # flake8-self
    "SLOT",        # flake8-slots
    "SIM",         # flake8-simplify
    "TCH",         # flake8-type-checking
    "TID",         # flake8-tidy-imports
    "TRY",         # tryceratops
    "UP",          # pyupgrade
    "YTT",         # flake8-2020
]
extend-ignore = [
    "ANN101",  # Missing type annotation for self in method
    "ANN102",  # Missing type annotation for cls in classmethod
    "E501",    # Line too long (Black is enough)
    "PLR",     # Design related pylint codes
]
flake8-unused-arguments.ignore-variadic-names = true
isort.required-imports = ["from __future__ import annotations"]
line-length = 120

[tool.ruff.per-file-ignores]
"*.pyi" = ["D"]  # pydocstyle
"*.ipynb" = [
    "D",    # pydocstyle
    "E402", # Allow imports to appear anywhere in Jupyter notebooks
    "I002", # Allow missing `from __future__ import annotations` import
]

[tool.ruff.pydocstyle]
convention = "google"
